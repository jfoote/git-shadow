#!/usr/bin/env python
# 
# Jonathan Foote
# jmfoote@loyola.edu

import subprocess, re, sys, os, json, difflib, shutil, filecmp


'''
Git utility functions
'''

devnull = open(os.devnull, 'w')

def rm_r(path):
    if os.path.isdir(path):
        shutil.rmtree(path)
    elif os.path.exists(path):
        os.remove(path)

def get_repo_path(path):
    if not os.path.isdir(path):
        path = os.path.dirname(path)
    return subprocess.check_output(["git", "rev-parse", "--show-toplevel"], 
            cwd=path, stderr=devnull).strip()

def get_branch(path):
    if not os.path.isdir(path):
        path = os.path.dirname(path)
    text = subprocess.check_output(["git", "branch"], cwd=path, stderr=devnull)
    line = [l for l in text.splitlines() if "*" in l][0]
    return line.strip("* ")

def get_filepath_relative_to_repo(filepath):
    dirpath, filename = os.path.split(filepath)
    repo_rel_dirpath = subprocess.check_output(["git", "rev-parse", 
        "--show-prefix"], cwd=dirpath, stderr=devnull).strip()
    return os.path.join(repo_rel_dirpath, filename)

def get_commit_id(cwd):
    return subprocess.check_output(["git", "log", '--format=%H', "-n", "1"], 
            cwd=cwd, stderr=devnull).strip()


'''
Shadow repo management functions
'''

def get_shadow_path(path):
    '''
    Gets the absolute path to the shadow repo for the repo containing 'path'
    '''
    return os.path.join(get_repo_path(path), ".shadow")

def get_current_path(cwd):
    return os.path.join(get_shadow_path(cwd), "current")

def create_current(cwd="."):
    '''
    Creates a <repo>/.shadow/current and adds in controlled files to it. 
    '''
    path = get_current_path(cwd)
    os.makedirs(path)
    subprocess.check_output(["git", "init", path], cwd=cwd, stderr=devnull)
    shadow_controlled_files(get_repo_path(cwd), path)

def add_hooks(cwd):
    '''
    Create (or add to) git hook files that call git-shadow. 
    '''
    hook_dir = os.path.join(get_repo_path(cwd), ".git", "hooks")
    for hook in ["post-commit", "post-checkout"]:
        filepath = os.path.join(hook_dir, hook)
        if not os.path.exists(filepath):
            with open(filepath, "wt") as fp:
                fp.write("#!/bin/sh\ngit shadow %s\n" % hook)
            subprocess.check_call(["chmod", "+x", filepath]) # TODO: POSIX only
        else:
            with open(filepath, "at") as fp:
                fp.write("\ngit shadow %s\n" % hook)

def remove_hooks(cwd):
    '''
    Remove git-shadow hooks from git repo
    '''
    hook_dir = os.path.join(get_repo_path(cwd), ".git", "hooks")
    for hook in ["post-commit", "post-checkout"]:
        filepath = os.path.join(hook_dir, hook)
        if open(filepath, "rt").read() == ("#!/bin/sh\ngit shadow %s\n" % hook):
            os.remove(filepath)
        else:
            lines = [l.strip() for l in open(filepath, "rt").readlines() if l.strip() != "git shadow %s" % hook]
            open(filepath, "wt").write("\n".join(lines))


'''
File shadowing functions
'''

def shadow_controlled_files(src, dst):
    '''
    Adds and commits all controlled files from repo at src to repo at dst. 
    '''
    try:
        rel_fps = subprocess.check_output(["git", "ls-tree", "-r", "HEAD", 
            "--name-only"], cwd=src, stderr=devnull).strip().splitlines()
    except subprocess.CalledProcessError:
        # this happens when there are no commits in the repo: fatal: Not a valid object name HEAD
        return
    changed = False
    for rel_fp in rel_fps:
        dst_filepath = os.path.join(dst, rel_fp)
        dst_dirpath, dst_filename = os.path.split(dst_filepath)
        src_filepath = os.path.join(src, rel_fp)
        try:
            if not os.path.exists(dst_dirpath):
                subprocess.check_call(["mkdir", "-p", dst_dirpath], cwd=src)
            shutil.copy(src_filepath, dst_filepath)
            subprocess.check_call(["git", "add", dst_filepath], cwd=dst, 
                    stderr=devnull)
            changed = True
        except Exception as e:
            import logging
            logging.error("error copying %s to %s, probably uncommitted 'git mv'" % (src_filepath, dst_filepath))
            logging.exception(e)
    if changed:
        subprocess.check_call(["git", "commit", "-m", 
            "'%s'" % get_commit_id(src)], cwd=dst, stdout=devnull,
            stderr=devnull)

def in_shadow_dir(filepath):
    rel = get_filepath_relative_to_repo(filepath)
    if os.path.split(rel)[0] == ".shadow":
        return True
    return False

def shadow_file(filepath, buffer_path):
    '''
    Adds/commits contents of buffer_path to .shadow/current at path
    corresponding to filepath if contents are new.
    Note that filepath may correspond to a file that doesn't exist on disk
    yet (like a named buffer in the editor). 
    '''
    if not is_active(filepath):
        return
    if in_shadow_dir(filepath):
        return

    current = get_current_path(filepath)
    rel = get_filepath_relative_to_repo(filepath)
    shadow = os.path.join(current, rel)

    # If the shadow file exists and matches the buffer, bail
    if os.path.exists(shadow) and \
            filecmp.cmp(shadow, buffer_path, shallow=False):
        return

    shutil.copy(buffer_path, shadow)
    subprocess.check_call(["git", "add", rel], cwd=current, stderr=devnull)
    subprocess.check_call(["git", "commit", "-m", "'file_modified'"], 
            cwd=current, stdout=devnull, stderr=devnull)

def checkout_shadow(cwd):
    # 1. copy .shadow/<commit id> to .shadow/current; this is a "read" operation on the shadow
    #    - if the user has abandoned changes to .shadow/current, it will be necessary to delete it first
    current = get_current_path(cwd)
    if os.path.exists(current):
        rm_r(current)
    commit = get_commit_path(cwd)
    shutil.copytree(commit, current)

def get_commit_path(cwd):
    return os.path.join(get_shadow_path(cwd), get_commit_id(cwd))

def commit_shadow(cwd):
    '''
    Moves .shadow/current to .shadow/<commit id> and creates a new shadow
    Note that shadow/<commit id> should not exist, as re-writes of commits 
    aren't usually done with an editor 
    '''
    # 2. Create a new .shadow/current
    path = get_commit_path(cwd)
    if os.path.exists(path):
        raise RuntimeError("repo for commit already exists at %s" % path) 
    shutil.move(get_current_path(cwd), path)
    create_current(cwd)

def is_active(cwd):
    try:
        return os.path.exists(get_current_path(cwd))
    except subprocess.CalledProcessError:
        return False

def activate(cwd):
    create_current(cwd)
    add_hooks(cwd)

def deactivate(cwd):
    remove_hooks(cwd)
    rm_r(get_current_path(cwd))

if __name__ == "__main__":
    if len(sys.argv) < 2:
        sys.stderr.write("not enough args")
        sys.exit(-1)

    if len(sys.argv) > 2:
        cwd = sys.argv[2]
    else:
        cwd = "."

    if sys.argv[1] == "activate":
        activate(cwd=cwd)
    elif sys.argv[1] == "deactivate":
        deactivate(cwd=cwd)
    elif sys.argv[1] in ["post-commit"]:
        commit_shadow(cwd)
    elif sys.argv[1] in ["post-checkout"]: 
        checkout_shadow(cwd)
    elif sys.argv[1] == "shadow-file":
        filepath = sys.argv[2]
        buffer_path = sys.argv[3]
        shadow_file(filepath, buffer_path)
    else: # analyze
        # run git command in mirror directory of shadow repo
        # 0. if .shadow/current doesn't exist, bail with message
        # 1. cd to .shadow/current
        # 2. run command
        pass

"""
TODO:
    1. cleanup
    2. Advertise no support for history re-writing: re-ordering may work, but squashing/splitting and filter-branch probably won't
"""
